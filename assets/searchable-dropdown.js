const SearchableDropDown={name:"Searchable Dropdown",delimiters:["$%","%$"],template:'\n    <div class="dropdown" v-if="options">\n\n        <input class="dropdown-input"\n        @focus="showOptions()"\n        @blur="exit()"\n        @keyup="monitorEnterKey"\n        v-model="data.searchFilter"\n        :placeholder="placeholder" />\n\n        <div class="dropdown-content"\n        v-show="data.optionsShown">\n            <div\n                class="dropdown-item"\n                @mousedown="selectOption(option)"\n                v-for="(option, index) in filteredOptions"\n                :key="index">\n                $% option || \'-\' %$\n            </div>\n        </div>\n    </div>\n    ',props:{options:{type:Array,required:!0,default:[]},placeholder:{type:String,required:!1,default:"Please select an option"}},emits:["selected","filter"],setup(e,{emit:n}){const t=reactive({selected:{},optionsShown:!1,searchFilter:""});function o(e){t.selected=e,t.optionsShown=!1,t.searchFilter=t.selected.name,n("selected",t.selected)}const s=computed((()=>{const n=[],o=new RegExp(t.searchFilter,"ig");for(const s of e.options)(t.searchFilter.length<1||s.match(o))&&n.push(s);return n}));return watch(t,(e=>{console.log(s),0===s.value.length?t.selected={}:t.selected=s.value[0]})),{data:t,filteredOptions:s,selectOption:o,showOptions:function(){t.searchFilter="",t.optionsShown=!0,console.log("showoptions")},exit:function(){t.selected.id?t.searchFilter=t.selected.name:(t.selected={},t.searchFilter=""),n("selected",t.selected),t.optionsShown=!1},monitorEnterKey:function(e){"Enter"===e.key&&s.value[0]&&o(s.value[0])}}}};