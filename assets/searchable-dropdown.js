const SearchableDropDown={name:"Searchable Dropdown",delimiters:["$%","%$"],template:'\n    <div class="dropdown" v-if="options">\n\n        <input class="dropdown-input"\n        @focus="showOptions()"\n        @blur="exit()"\n        @keyup="monitorEnterKey"\n        v-model="searchFilter"\n        :placeholder="placeholder" />\n\n        <div class="dropdown-content"\n        v-show="optionsShown">\n            <div\n                class="dropdown-item"\n                @mousedown="selectOption(option)"\n                v-for="(option, index) in filteredOptions"\n                :key="index">\n                {{ option || \'-\' }}\n            </div>\n        </div>\n    </div>\n    ',props:{options:{type:Array,required:!0,default:[]},placeholder:{type:String,required:!1,default:"Please select an option"}},emits:["selected","filter"],setup(e,{emit:t}){const n=reactive({selected:{},optionsShown:!1,searchFilter:""});function o(e){n.selected=e,n.optionsShown=!1,n.searchFilter=n.selected.name,t("selected",n.selected)}const i=computed((()=>{const t=[],o=new RegExp(n.searchFilter,"ig");for(const i of e.options)(n.searchFilter.length<1||i.match(o))&&t.push(i);return t}));return watch(searchFilter,(e=>{0===i.value.length?n.selected={}:n.selected=i.value[0],t("filter",e)})),{data:n,filteredOptions:i,selectOption:o,showOptions:function(){n.searchFilter="",n.optionsShown=!0},exit:function(){n.selected.id?n.searchFilter=n.selected.name:(n.selected={},n.searchFilter=""),t("selected",n.selected),n.optionsShown=!1},monitorEnterKey:function(e){"Enter"===e.key&&i.value[0]&&o(i.value[0])}}}};