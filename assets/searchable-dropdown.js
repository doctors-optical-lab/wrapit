const{reactive:reactive,ref:ref,computed:computed,watch:watch}=Vue,SearchableDropDown={name:"Searchable Dropdown",delimiters:["$%","%$"],props:{options:{type:Array,required:!0,default:[]},placeholder:{type:String,required:!1,default:"Please select an option"}},template:'\n    <div class="dropdown" v-if="options">\n\n        <input class="dropdown-input"\n        @focus="showOptions()"\n        @blur="exit()"\n        @keyup="monitorEnterKey"\n        v-model="searchFilter"\n        :placeholder="placeholder" />\n\n        <div class="dropdown-content"\n        v-show="optionsShown">\n            <div\n                class="dropdown-item"\n                @mousedown="selectOption(option)"\n                v-for="(option, index) in filteredOptions"\n                :key="index">\n                {{ option || \'-\' }}\n            </div>\n        </div>\n    </div>\n    ',setup(){const e=reactive({selected:{},optionsShown:!1,searchFilter:""}),t=defineEmits(["selected","filter"]);function n(n){e.selected=n,e.optionsShown=!1,e.searchFilter=e.selected.name,t("selected",e.selected)}const o=computed((()=>{const t=[],n=new RegExp(e.searchFilter,"ig");for(const o of props.options)(e.searchFilter.length<1||o.match(n))&&t.push(o);return t}));return watch(searchFilter,(n=>{0===o.value.length?e.selected={}:e.selected=o.value[0],t("filter",n)})),{data:e,filteredOptions:o,selectOption:n,showOptions:function(){e.searchFilter="",e.optionsShown=!0},exit:function(){e.selected.id?e.searchFilter=e.selected.name:(e.selected={},e.searchFilter=""),t("selected",e.selected),e.optionsShown=!1},monitorEnterKey:function(e){"Enter"===e.key&&o.value[0]&&n(o.value[0])}}}};